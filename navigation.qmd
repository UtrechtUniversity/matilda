---
title: "Navigation tool"
---

```{ojs}
//| echo: false

// it looks like when publishing the website, the links need to have
// matilda/  in front

viewof q1 = {
  const form = Inputs.checkbox(["Description", "Exploration", "Prediction", "Causation", "Explanation", "I am not sure"], {label: "My research goal is"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a1 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q1.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q1.some((element) => element == "Description")) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q1.some((element) => element == "Exploration")) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q1.some((element) => element == "Prediction")) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link3"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q1.some((element) => element == "Causation")) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link4"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q1.some((element) => element == "Explanation")) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link5"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q1.some((element) => element == "I am not sure")) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link6"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  p.appendChild(ul);
  return p;
}
```

${a1}

```{ojs}
//| echo: false

viewof q2 = {
  const form = Inputs.checkbox(new Map([["No, my construct is not event-related.", 1], ["Yes. I am interested in a construct which can only be observed within certain situations.", 2], ["Yes. I am interested in changes in my construct in response to events/triggers.", 3], ["I am not sure", 4]]), {label: "Is your construct of interest event-related?"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a2 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q2.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q2.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q2.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "substantive-theory/time-scales/event-relations.html";
    link2.appendChild(document.createTextNode("Event - Relation in ILD Measurement"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q2.some((element) => element == 3)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "substantive-theory/time-scales/regime-switches.html";
    link2.appendChild(document.createTextNode("Regime Switches"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q2.some((element) => element == 4)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link4"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  p.appendChild(ul);
  return p;
}
```

${a2}

```{ojs}
//| echo: false

viewof q3 = {
  const form = Inputs.checkbox(new Map([["Yes", 1], ["No", 2], ["I am not sure", 3]]), {label: "Do you know at what time scale your construct varies?"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a3 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q3.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q3.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q3.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "substantive-theory/time-scales.html";
    link2.appendChild(document.createTextNode("Time Scales"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q3.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "substantive-theory/time-scales.html";
    link3.appendChild(document.createTextNode("Time Scales"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  return p;
}

q3b_show = {
  let result;
  result = null;
  if (q3.some((element) => element == 1)) {
    result = viewof q3b;
  }
  return result;
}

a3b = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q3b.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q3b.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q3b.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "substantive-theory/time-scales/relating-constructs.html";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q3b.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "substantive-theory/time-scales.html";
    link3.appendChild(document.createTextNode("Time Scales"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  const scope = DOM.uid().id;
  p.classList.add(scope);
  p.append(htl.html`<style>
    p.${scope}, .${scope} > div {
        margin-left: 50px;
    }
  </style>`);
  return p;
}

a3b_show = {
  let result;
  result = null;
  if (q3.some((element) => element == 1)) result = a3b;
  return result;
}
```

```{ojs}
//| echo: false
//| include: false

viewof q3b = {
  const form = Inputs.checkbox(new Map([["Yes", 1], ["No", 2], ["I am not sure", 3]]), {label: "Strictly speaking, do all constructs vary at the same time scale?"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
        margin-left: 25px;
      }
      form.${scope}, .${scope} > div label {
        display: block;
        margin-left: 25px;
      }
  </style>`);
  return form;
}
```

${a3}

${q3b_show}

${a3b_show}

```{ojs}
//| echo: false

viewof q5 = {
  const form = Inputs.checkbox(new Map([["Single items", 1], ["Multiple items", 2], ["I am not sure", 3]]), {label: "I want to measure my construct(s) with"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a5 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q5.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q5.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "measurement-theory/validation/reliability-single-items.html";
    link.appendChild(document.createTextNode("Reliability for single item measures"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q5.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q5.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "measurement-theory/item-design/single-multiple-items.html";
    link3.appendChild(document.createTextNode("Measuring a Construct with Single vs. Multiple Items"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  return p;
}

q5b_show = {
  let result;
  result = null;
  if (q5.some((element) => element == 2)) {
    result = viewof q5b;
  }
  return result;
}

a5b = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q5b.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q5b.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q5b.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q5b.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "/";
    link3.appendChild(document.createTextNode("link3"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  if (q5b.some((element) => element == 4)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "/";
    link3.appendChild(document.createTextNode("link4"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  const scope = DOM.uid().id;
  p.classList.add(scope);
  p.append(htl.html`<style>
    p.${scope}, .${scope} > div {
        margin-left: 50px;
    }
  </style>`);
  return p;
}

a5b_show = {
  let result;
  result = null;
  if (q5.some((element) => element == 2)) result = a5b;
  return result;
}
```

```{ojs}
//| echo: false
//| include: false

viewof q5b = {
  const form = Inputs.checkbox(new Map([["Content validity", 1], ["Reliabilty", 2], ["The construct stems from individual difference research", 3], ["Other", 4]]), {label: "What are your reasons for using multiple items to measure a single construct?"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
        margin-left: 25px;
      }
      form.${scope}, .${scope} > div label {
        display: block;
        margin-left: 25px;
      }
  </style>`);
  return form;
}
```

${a5}

${q5b_show}

${a5b_show}

```{ojs}
//| echo: false

viewof q7 = {
  const form = Inputs.checkbox(new Map([["Use multiple items to increase internal consistency.", 1], ["Detect measurement error in single items.", 2], ["I am not sure", 3]]), {label: "To ensure reliability of my measurements I intend to"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a7 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q7.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q7.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q7.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q7.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "/";
    link3.appendChild(document.createTextNode("link3"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  return p;
}
```

${a7}

```{ojs}
//| echo: false

viewof q8 = {
  const form = Inputs.checkbox(new Map([["Yes", 1], ["No", 2], ["I am not sure", 3]]), {label: "Do you expect floor and ceiling effects?"})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a8 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q8.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q8.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q8.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q8.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "/";
    link3.appendChild(document.createTextNode("link3"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  return p;
}
```

${a8}

```{ojs}
//| echo: false

viewof q9 = {
  const form = Inputs.checkbox(new Map([["Yes", 1], ["No", 2], ["I am not sure", 3]]), {label: "Are you expecting sudden changes or switches in you construct over time?    "})
  const scope = DOM.uid().id;
  form.classList.add(scope);
  form.append(htl.html`<style>
      form.${scope} > label {
        display: block;
        width: 100%;
      }
      form.${scope}, .${scope} > div label { display: block }
  </style>`);
  return form;
}

a9 = {
  const p = document.createElement("p");
  const ul = document.createElement("ul");
  if (q9.length) {
    p.appendChild(document.createElement("strong")).appendChild(document.createTextNode("We recommend the following pages:"));
  }
  if (q9.some((element) => element == 1)) {
    const li1 = document.createElement("li");
    var link = document.createElement("a");
    link.href = "/";
    link.appendChild(document.createTextNode("link1"));
    li1.appendChild(link);
    ul.appendChild(li1);
  }
  if (q9.some((element) => element == 2)) {
    const li2 = document.createElement("li");
    const link2 = document.createElement("a");
    link2.href = "/";
    link2.appendChild(document.createTextNode("link2"))
    li2.appendChild(link2);
    ul.appendChild(li2);
  }
  if (q9.some((element) => element == 3)) {
    const li3 = document.createElement("li");
    const link3 = document.createElement("a");
    link3.href = "/";
    link3.appendChild(document.createTextNode("link3"))
    li3.appendChild(link3);
    ul.appendChild(li3);
  }
  p.appendChild(ul);
  return p;
}
```

${a9}
